
import mysql.connector
import random
import time

#Subprograms

# Prints game title
def Title():
    print(" ██▓███   ██▀███   ▒█████   ▄▄▄██▀▀▀▓█████  ▄████▄  ▄▄▄█████▓     ▄████  ██▀███   ▄▄▄    ██▒   █▓▓█████  ██░ ██  ██▓ ██▓     ██▓")  
    print("▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒   ▒██   ▓█   ▀ ▒██▀ ▀█  ▓  ██▒ ▓▒    ██▒ ▀█▒▓██ ▒ ██▒▒████▄ ▓██░   █▒▓█   ▀ ▓██░ ██▒▓██▒▓██▒    ▓██▒")    
    print("▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒   ░██   ▒███   ▒▓█    ▄ ▒ ▓██░ ▒░   ▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄▓██  █▒░▒███   ▒██▀▀██░▒██▒▒██░    ▒██░")    
    print("▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░▓██▄██▓  ▒▓█  ▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░    ░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██▒██ █░░▒▓█  ▄ ░▓█ ░██ ░██░▒██░    ▒██░")    
    print("▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░ ▓███▒   ░▒████▒▒ ▓███▀ ░  ▒██▒ ░    ░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒▀█░  ░▒████▒░▓█▒░██▓░██░░██████▒░██████▒")
    print("▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ▒▓▒▒░   ░░ ▒░ ░░ ░▒ ▒  ░  ▒ ░░       ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▐░  ░░ ▒░ ░ ▒ ░░▒░▒░▓  ░ ▒░▓  ░░ ▒░▓  ░")
    print("░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░  ▒ ░▒░    ░ ░  ░  ░  ▒       ░         ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░ ░░   ░ ░  ░ ▒ ░▒░ ░ ▒ ░░ ░ ▒  ░░ ░ ▒  ░")
    print("░░         ░░   ░ ░ ░ ░ ▒   ░ ░ ░      ░   ░          ░         ░ ░   ░   ░░   ░   ░   ▒     ░░     ░    ░  ░░ ░ ▒ ░  ░ ░     ░ ░   ")   
    print("░         ░ ░   ░   ░      ░  ░░ ░                        ░    ░           ░  ░   ░     ░  ░ ░  ░  ░ ░      ░  ░    ░  ░")
    print("                                       ░                                                 ░                                ")      
    x = input("Type 'enter' to begin your journey ")
    while (x != "enter"):
        print("Are you scared? Please try again")
        x = input ("Type 'enter' to begin your journey ")
    print("Good luck. You will need it")
    return

# Displays backstory
def printStoryDesc():
    print("STORY SO FAR...")
    #time.sleep(2)
    print(" Samuel Blackwater has always been interested in strange tales and urban legends. He is a former")
    #time.sleep(1)
    print("professor of folkloristics in the Royal university of Southern Scotland. Recently he has been")
    #time.sleep(1)
    print("studying the rumors about the Castle of Gravehill and he decides to meet the last heir of the")
    #time.sleep(1)
    print("Gravehill family. Weeks pass and nothing is heard from the professor but since he didn't tell anyone")
    #time.sleep(1)
    print("about his expedition no one is concerned of his wellbeing. ")
    print("")
    #time.sleep(1)
    print(" One day Howard Blackwater receives a letter from his only living relative Uncle Samuel")
    #time.sleep(1)
    print("Blackwater. ”Hello my dearest nephew. If you are reading this letter and you have heard nothing of")
    #time.sleep(1)
    print("me past four weeks I am in grave danger. I have been investigating the strange rumors regarding")
    #time.sleep(1)
    print("the  Castle of Gravehill. The family of Gravehills has always been in the center of rumors around")
    #time.sleep(1)
    print("that area. But I don't believe these are just rumors. I am quite sure there are some really dark and")
    #time.sleep(1)
    print("evil things happening in the castle and I will find out what. Howard, you are my only hope please")
    #time.sleep(1)
    print("help me.” Afraid but twistedly intrigued Howard departs for the Castle of Gravehill.")
    #time.sleep(2)
          
    
# Displays commands to the player
def printCommands():
    print("COMMANDS")
    print("commands - print list of commands")
    print("go north - alias n - moves game character")
    print("go souht - alias s - moves game character")
    print("go east - alias e - moves game character")
    print("go west - alias w - moves game character")
    print("go up - alias u - moves game character")
    print("go down - alias d - moves game character")
    print("take  - alias get - get item to game character")
    print("drop -  drop item to room")
    print("examine - describes the current room")
    print("inventory - shows my items")
    print("open door - open door ")
    print("close door - close door")
    print("drink 'item' - drinks the item if possible")
    print("eat 'item' - eats the item if possible")
    print("pray - prays the Old Ones for power and salvation")
    print("break 'object' with 'item' - breaks the object with item if possible")
    print("dig - digs around the player character")
    print("attack with 'item' - attacks monster in current location")
    print("reload 'weapon' - reloads the weapon")
    print("run north/south/west/east - runs away form monter to selected direction")
    print("quit - alias q - quits the game")
    print("\n")
    return

def articles(List):
    if "the" in List:
        List.remove("the")
    elif "an" in List:
        List.remove("an")
    elif "a" in List:
        List.remove("a")
    return List

def first_upper(word):
   if len(word) == 0:
      return word
   else:
      return word[0].upper() + word[1:]

def first_lower(word):
   if len(word) == 0:
      return word
   else:
      return word[0].lower() + word[1:]

# Subprogram yhat checks characters current location
def CheckCurLoc():
    CurRoom=0
    cur = db.cursor()
    sql = "select location from playercharacter where ID=1;"
    cur.execute(sql)
    result = cur.fetchall()
    for row in result:
        CurRoom="%s"%(row)
    return CurRoom
    

# Prints the description of character's current location    
def printCharCurLocDesc():
    cur = db.cursor()
    sql = "select description from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        #cur.execute(sql)
        for row in result:
            print("%s"%(row))
    return

# Subprogram that updates item to be with player, item's name as a parameter
def updateItemToPlayer(item):
    cur = db.cursor()
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = 1 where name='"+item+"' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set location = null where name='"+item+"' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    #if item == "Key I" or item == "Key II" or item == "Key III" or item == "Key IV":
        #print("Key taken.")
    #else:
    print(item+" taken.")
    return

# This subprogram checks if the item is on the room (item's name as a parameter)
def checkIfItemInRoom(item):
    itemInRoom=False;
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where id =1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==item:
                itemInRoom=True
    return itemInRoom
    
# Displays inventory
def inventory():
    cur = db.cursor()
    sql = "select itemtypes.name from items inner join itemtypes on items.itemtype=itemtypes.ID where withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            print("-%s"%(row))
    return

# Subprogram that checks if the item is with player, item's name as a parameter
def checkIfUserHaveItem(item):
    itemWithPlayer=False;
    cur = db.cursor()
    sql = "select withPlayer from items inner join itemtypes on items.itemtype=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                itemWithPlayer=True
    return itemWithPlayer

def displayItemsInRoom():
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            print ("There's %s here"%(row))
    return

# Subprogram that checks if the room is illuminated
def checkRoomLight():
    LightOn=False;
    cur = db.cursor()
    sql = "select light from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                LightOn=True
    else:
        LightOn=False
    return LightOn
        

def takeKey(item):
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount >1:
        print("Which key you want to take?")
    else:
        if cur.rowcount == 1:
            for row in result:
                item="%s"%(row)
        if checkIfItemInRoom(item) == True:
            updateItemToPlayer(item)
        else:
            print("You can't see such item.")



def dropKey(item):
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount >1:
        print("Which key you want to drop?")
    else:
        if cur.rowcount == 1:
            for row in result:
                item="%s"%(row)
        if checkIfUserHaveItem(item) == True:
            dropItemToCurRoom(item)
        else:
            print("You don't have such item.")
    return

def useKey(Object,item):
    cur = db.cursor()
    if checkKey() == True:
        sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and withPlayer=1;"
        cur.execute(sql)
        result = cur.fetchall()
        if cur.rowcount >1:
            print("Which key you want to use?")
        else:
            if cur.rowcount == 1:
                for row in result:
                    item="%s"%(row)
            if checkIfUserHaveItem(item)==True:
                openDoor(Object,item)
            else:
                print("You don't have the %s."%(item.lower()))
    else:
        print("You don't have any keys.")
    return

# Drops item to player's current location, item's name as a parameter
def dropItemToCurRoom(item):
    cur = db.cursor()
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = null, location = (select location from playercharacter where id=1) where itemtypes.name='"+item+"';"
    cur.execute(sql)
    #if item == "Key I" or item == "Key II" or item == "Key III" or item == "Key IV":
        #print("You dropped the key.")
    #else:
    print("You dropped the %s."%(first_lower(item)))
    return

def roomInDirection(direction):
    cur = db.cursor()
    sql = "select "+direction+" from map where room in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirection = row[0]
    return roomDirection
    
def roomOpenInDirection(direction):
    cur = db.cursor()
    sql = "select "+direction+"Open from map where room in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirectionOpen = row[0]
    return roomDirectionOpen


def checkIfObjectInRoom(object1):
    objectInRoom = False
    cur = db.cursor()
    sql = "select name from objects where location in (select location from playercharacter where ID=1) and name='"+object1+"';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            if row[0]==object1:
                objectInRoom = True
    return objectInRoom

def door(Object,item):
    cur = db.cursor()
    sql = "select unlocked from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            unlocked=int("%s"%(row))
    if unlocked==0:
        sql = "select neededkey from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        result = cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                neededKey="%s"%(row)
        if neededKey==item or item=="":
            sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name='"+neededKey+"' and withPlayer=1;"
            cur.execute(sql)
            result = cur.fetchall()
            if cur.rowcount>=1:
                    for row in result:
                        if row[0]==neededKey:
                            sql="select way from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
                            result = cur.fetchall()
                            if cur.rowcount>=1:
                                    for row in result:
                                        way="%s"%(row)
                            sql = "update map inner join room on map.room=room.ID set "+way+"Open=1 where room.ID in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
                            print("You unlock the %s."%(Object))
                            sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer=0 where name='"+neededKey+"' and withPlayer=1;"
                            cur.execute(sql)
                            sql = "update doors inner join objects on doors.ID=objects.ID set unlocked=1 where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
            elif item!="":
                print("You don't have the %s."%(neededKey.lower()))
            else:
                print("You don't have the key to this %s."%(Object))
        else:
            print("Your key doesn't fit the lock.")
    else:
        print("There's no %s to unlock."%(Object))
    return
        

        

# Subprogram for opening doors CheckCurLoc() == "87"
def openDoor(Object,item):
    plural=False
    cur = db.cursor()
    if len(Object)>0:
        if Object[-1]=="s":
            Object=Object[:-1]
            plural=True
    if checkIfObjectInRoom(Object)==True:
            if checkKey() == True:
                door(Object,item)
            else:
                print("You don't have any keys.")
    else:
        if plural==True:
            print("There are no %ss to unlock."%(Object))
        else:
            print("There's no %s to unlock."%(Object))
    return
        
   
        
def directionPossibleIfYesMove(direction):
    moveOk = False
    cur = db.cursor()
    if roomInDirection(direction) != None and roomOpenInDirection(direction) == 1:
        sql = "update playercharacter set location = "+str(roomInDirection(direction))+" where id=1;"
        cur.execute(sql)
        moveOk = True
    elif roomInDirection(direction) != None and roomOpenInDirection(direction) == 0:
        sql = "select name from objects inner join doors on objects.ID=doors.ID where location in (select location from playercharacter where ID=1) and way='"+direction+"';"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                Object="%s"%(row)
        print("The %s is locked."%(Object))
    else:
        print("You can't go that way!")
    return moveOk

def checkKey():
    Key = False
    cur = db.cursor()
    sql = "select itemtype from items inner join itemtypes on items.itemtype=itemtypes.ID where name like '%key%' and withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            Key = True
    return Key

def whichKey():
    keys=[]
    cur = db.cursor()
    sql = "select itemtypes.ID from itemtypes inner join items on itemtypes.ID=items.itemtype where withPlayer=1 and name like '%key%';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            key="%s"%(row)
            keys.append(key)
    return keys
#Aliohjelma joka tulostaa huoneen nimen missä pelaaja sijaitsee

def printCharCurLocName():
    cur = db.cursor()
    sql = "select name from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        cur.execute(sql)
        for row in result:
            print("%s"%(row))
    return

#Aliohjelma joka tarkistaa onko huoneessa vierailtu

def checkIfRoomVisited():
    visited = False
    cur = db.cursor()
    sql = "select visited from room inner join playercharacter on playercharacter.location=room.ID where room.ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                visited=True
    else:
        visited=False
    return visited


#aliohjelma joka muuttaa huoneen käydyksi jos siellä ei ole käyty
def changeRoomVisited():
    cur = db.cursor()
    sql ="update room inner join playercharacter on playercharacter.location=room.ID set visited=1 where room.ID in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    return 

def displayStatus():
    cur = db.cursor()
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health="%s"%(row)
    sql = "select sanity from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanity="%s"%(row)
    print("Health: %s  Sanity: %s"%(health,sanity))
    return

def heal(item):
    cur = db.cursor()
    sql = "select healthEffect from healing inner join itemtypes on healing.ID=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            healingEffect=int("%s"%(row))
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    newHealth=health+healingEffect
    sql = "select sanityEffect from healing inner join itemtypes on healing.ID=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanityEffect=int("%s"%(row))
    sql = "select sanity from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanity=int("%s"%(row))
    newSanity=sanity+sanityEffect
    if newHealth>100:
        sql = "update playercharacter set health=100;"
        cur.execute(sql)
    else:
        sql = "update playercharacter set health=%d;"%(newHealth)
        cur.execute(sql)
    if newSanity>100:
        sql = "update playercharacter set sanity=100;"
        cur.execute(sql)
    else:
        sql = "update playercharacter set sanity=%d;"%(newSanity)
        cur.execute(sql)
    return

    
#PÄÄOHJELMA ALKAA

# Tietokantayhteyden nuodostaminen
db = mysql.connector.connect(host="127.0.0.1",
                            user="Rainer",
                            passwd="Ironmaiden28995",
                            db="gravehill",
                            buffered=True)
#db.autocommit=False;
Title()
printStoryDesc()
x = input("Type 'c' to continue ")
while (x != "c"):
    print("Please try again")
    x = input ("Type 'c' to continue ")
print("\n")
#printCommands()
print("Welcome to the Castle Gravehill!\n")
time.sleep(1)
end = "temp"

while (end != "quit"):
    if checkRoomLight() == True and checkIfRoomVisited() == False:
        printCharCurLocName()
        printCharCurLocDesc()
        displayItemsInRoom()
        changeRoomVisited()
    elif checkRoomLight()==False:
        print("Darkness")
        print("You can't see a thing in this pitch dark room!")
    else:
        printCharCurLocName()
        displayItemsInRoom()
    com="temp"
    move_look=False
    while move_look == False and end != "quit":
        withSentence=False
        command = input("What would you like to do? ")
        if command=="":
            print("Whatever")
        else:
            #Converts command into a command list
            comList = command.split()
            

            if len(comList)==0:
                com="error"
            #Saves the actual command in com variable
            else:
                com = comList[0].lower()
                #Deletes the command from command list
                del comList[0]
            #This line takes care of the commands that include "with", for example "open door with key"
            if "with" in comList:
                objectList=[]
                while comList.index("with") != 0:
                    word = comList[0]
                    objectList.append(word)
                    comList.remove(comList[0])
                comList.remove("with")
                objectList=articles(objectList)
                object1=" ".join(str(x) for x in objectList)
                withSentence=True
                if "with" in comList:
                    com="error"
            comList=articles(comList)
            item = first_upper(" ".join(str(x)for x in comList))
            
        #if-rakenne, missä käydään kaikki komennot läpi
            if com == "commands":
                printCommands()
            elif com == "quit" or com == "q":
                end="quit"
            elif com == "look":
                print("Your current location is:\n")
                printCharCurLocName()    
                printCharCurLocDesc()
                displayItemsInRoom()
            elif com == "take":
                if item == "Key":
                    takeKey(item)
                elif item=="":
                    print("What do you want to take?")
                   
            #Tarkistetaan että käskyssä annettu esine on huoneessa; Jos on, otetaan se
                elif checkIfItemInRoom(item) == True:
                    updateItemToPlayer(item)
                else:
                    print("You can't see such item.")
            elif com == "inventory":
                print("Player Items:")
                inventory()
            elif com == "unlock":
                if withSentence==False:
                    object1=item.lower()
                    if object1=="":
                        print("What do you wish to unlock?")
                    else:
                        item=""
                        openDoor(object1,item)
                else:
                    if object1=="":
                        print("What do you wish to unlock?")
                    else:
                        if item=="":
                            print("With what you want to unlock?")
                        elif item!="Key" and item!="Golden key" and item!="Silver key" and item!="Brass key" and item!="Iron key":
                            print("You can't do that")
                        elif item=="Key":
                            useKey(object1,item)
                        else:
                            openDoor(object1,item)
            elif com == "drop":

                if item=="Key":
                    dropKey(item)
                elif item=="":
                    print("What do you wish to drop?")
            
            #Tarkistetaan että käskyssä annettu esine on pelaajalla; Jos on, pudotetaan se
                elif checkIfUserHaveItem(item) == True:
                        dropItemToCurRoom(item)
                else:
                    print("You don't have such item.")
            elif com=="status":
                displayStatus()

            elif com=="use":
                if item=="Bandages":
                    heal(item)
                    print("You bind your wounds and feel a bit of relief.\nHealth +50")
                elif item=="Morphine":
                    heal(item)
                    print("You inject the morphine into your arm, and the sudden rush of dopamine fills your brain. It doesn't feel that bad anymore...\nHealth +20, Sanity +50")
                else:
                    print("You can't do that.")
        
            elif com == "east" or com == "e" or com == "west" or com == "w" or com == "north" or com == "n" or com == "south" or com == "s" or com == "down" or com == "d" or com == "up" or com == "u" or com == "northeast" or com == "ne" or com == "southeast" or com == "se" or com == "southwest" or com == "sw" or com == "northwest" or com== "nw": 
                if com=="e":
                    com = "east";
                if com=="w":
                    com = "west";
                if com=="n":
                    com = "north";
                if com=="s":
                    com = "south";
                if com=="d":
                    com = "down";
                if com=="u":
                    com = "up";
                if com=="ne":
                    com = "northeast";
                if com=="se":
                    com = "southeast";
                if com=="sw":
                    com = "southwest";
                if com=="nw":
                    com = "northwest";
          
                if directionPossibleIfYesMove(com) == True:
                    print("\n")
                    move_look = True
            
            else:
                print("I did not understand, please try again")  
           

# Perutaan tietokantaan tehdyt muutokset
db.rollback()
#suljetaan tietokanta yhteys
db.close()
print("I will see you in your nightmares",end="")
for x in range (0,6):
    time.sleep(0.7)
    print(".",end="")
time.sleep(2)
print("\nBYE!")


import mysql.connector
import random
import time

#Subprograms

# Prints game title
def Title():
    print(''' ██▓███   ██▀███   ▒█████   ▄▄▄██▀▀▀▓█████  ▄████▄  ▄▄▄█████▓     ▄████  ██▀███   ▄▄▄    ██▒   █▓▓█████  ██░ ██  ██▓ ██▓     ██▓    
▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒   ▒██   ▓█   ▀ ▒██▀ ▀█  ▓  ██▒ ▓▒    ██▒ ▀█▒▓██ ▒ ██▒▒████▄ ▓██░   █▒▓█   ▀ ▓██░ ██▒▓██▒▓██▒    ▓██▒    
▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒   ░██   ▒███   ▒▓█    ▄ ▒ ▓██░ ▒░   ▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄▓██  █▒░▒███   ▒██▀▀██░▒██▒▒██░    ▒██░    
▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░▓██▄██▓  ▒▓█  ▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░    ░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██▒██ █░░▒▓█  ▄ ░▓█ ░██ ░██░▒██░    ▒██░    
▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░ ▓███▒   ░▒████▒▒ ▓███▀ ░  ▒██▒ ░    ░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒▀█░  ░▒████▒░▓█▒░██▓░██░░██████▒░██████▒
▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ▒▓▒▒░   ░░ ▒░ ░░ ░▒ ▒  ░  ▒ ░░       ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▐░  ░░ ▒░ ░ ▒ ░░▒░▒░▓  ░ ▒░▓  ░░ ▒░▓  ░
░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░  ▒ ░▒░    ░ ░  ░  ░  ▒       ░         ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░ ░░   ░ ░  ░ ▒ ░▒░ ░ ▒ ░░ ░ ▒  ░░ ░ ▒  ░
░░         ░░   ░ ░ ░ ░ ▒   ░ ░ ░      ░   ░          ░         ░ ░   ░   ░░   ░   ░   ▒     ░░     ░    ░  ░░ ░ ▒ ░  ░ ░     ░ ░   
            ░         ░ ░   ░   ░      ░  ░░ ░                        ░    ░           ░  ░   ░     ░  ░ ░  ░  ░ ░      ░  ░    ░  ░
                                           ░                                                 ░                                      ''')      
    x = input("Type 'enter' to begin your journey ")
    while (x != "enter"):
        print("Are you scared? Please try again")
        x = input ("Type 'enter' to begin your journey ")
    print("Good luck. You will need it")
    return

def GameOver():
    print()
    print('''  ▄████  ▄▄▄       ███▄ ▄███▓▓█████     ▒█████   ██▒   █▓▓█████  ██▀███  
 ██▒ ▀█▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀    ▒██▒  ██▒▓██░   █▒▓█   ▀ ▓██ ▒ ██▒
▒██░▄▄▄░▒██  ▀█▄  ▓██    ▓██░▒███      ▒██░  ██▒ ▓██  █▒░▒███   ▓██ ░▄█ ▒
░▓█  ██▓░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄    ▒██   ██░  ▒██ █░░▒▓█  ▄ ▒██▀▀█▄  
░▒▓███▀▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒   ░ ████▓▒░   ▒▀█░  ░▒████▒░██▓ ▒██▒
 ░▒   ▒  ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░   ░ ▒░▒░▒░    ░ ▐░  ░░ ▒░ ░░ ▒▓ ░▒▓░
  ░   ░   ▒   ▒▒ ░░  ░      ░ ░ ░  ░     ░ ▒ ▒░    ░ ░░   ░ ░  ░  ░▒ ░ ▒░
░ ░   ░   ░   ▒   ░      ░      ░      ░ ░ ░ ▒       ░░     ░     ░░   ░ 
      ░       ░  ░       ░      ░  ░       ░ ░        ░     ░  ░   ░     
                                                     ░                   ''')
    db.rollback()
    end="no answer"
    while end=="no answer":
        playAgain=input("Do you want relive the horror? Y/N\n")
        if playAgain=="y" or playAgain=="Y":
            end=False
        elif playAgain=="n" or playAgain=="N":
            end=True
    return end

# Displays backstory
def printStoryDesc():
    print("STORY SO FAR...")
    #time.sleep(2)
    print(" Samuel Blackwater has always been interested in strange tales and urban legends. He is a former")
    #time.sleep(1)
    print("professor of folkloristics in the Royal university of Southern Scotland. Recently he has been")
    #time.sleep(1)
    print("studying the rumors about the Castle of Gravehill and he decides to meet the last heir of the")
    #time.sleep(1)
    print("Gravehill family. Weeks pass and nothing is heard from the professor but since he didn't tell anyone")
    #time.sleep(1)
    print("about his expedition no one is concerned of his wellbeing. ")
    print("")
    #time.sleep(1)
    print(" One day Howard Blackwater receives a letter from his only living relative Uncle Samuel")
    #time.sleep(1)
    print("Blackwater. ”Hello my dearest nephew. If you are reading this letter and you have heard nothing of")
    #time.sleep(1)
    print("me past four weeks I am in grave danger. I have been investigating the strange rumors regarding")
    #time.sleep(1)
    print("the  Castle of Gravehill. The family of Gravehills has always been in the center of rumors around")
    #time.sleep(1)
    print("that area. But I don't believe these are just rumors. I am quite sure there are some really dark and")
    #time.sleep(1)
    print("evil things happening in the castle and I will find out what. Howard, you are my only hope please")
    #time.sleep(1)
    print("help me.” Afraid but twistedly intrigued Howard departs for the Castle of Gravehill.")
    #time.sleep(2)
          
    
# Displays commands to the player
def printCommands():
    print("COMMANDS")
    print("commands - print list of commands")
    print("go north - alias n - moves game character")
    print("go souht - alias s - moves game character")
    print("go east - alias e - moves game character")
    print("go west - alias w - moves game character")
    print("go up - alias u - moves game character")
    print("go down - alias d - moves game character")
    print("take  - alias get - get item to game character")
    print("drop -  drop item to room")
    print("examine - describes the current room")
    print("inventory - shows my items")
    print("open door - open door ")
    print("close door - close door")
    print("drink 'item' - drinks the item if possible")
    print("eat 'item' - eats the item if possible")
    print("pray - prays the Old Ones for power and salvation")
    print("break 'object' with 'item' - breaks the object with item if possible")
    print("dig - digs around the player character")
    print("attack with 'item' - attacks monster in current location")
    print("reload 'weapon' - reloads the weapon")
    print("run north/south/west/east - runs away form monter to selected direction")
    print("quit - alias q - quits the game")
    print("\n")
    return

def parser(command):
    Items=['']
    withSentence=False
    object1=""
    comList = command.split()
    comList=lower_case(comList)
    if len(comList)==0:
        com="error"
    #Saves the actual command in com variable
    else:
        com = comList[0]
    #Deletes the command from command list
        del comList[0]
        if len(comList)!=0:
            if comList[0]=="up":
                com=com+" "+comList[0]
                del comList[0]
    #This line takes care of the commands that include "with", for example "open door with key"
        if "with" in comList:
            objectList=[]
            while comList.index("with") != 0:
                word = comList[0]
                if word!="all" and word!="and":
                    objectList.append(word)
                    comList.remove(comList[0])
                else:
                    com="error"
                    comList.remove(comList[0])
            comList.remove("with")
            objectList=articles(objectList)
            object1=" ".join(str(x) for x in objectList)
            withSentence=True
        if "with" in comList:
            com="error"
        Items=[]
        if "and" in comList:
            for i in range(0,1+comList.count("and")):
                itemList=[]
                if "and" in comList:
                    while comList[0] != "and":
                        word=comList[0]
                        itemList.append(word)
                        comList.remove(comList[0])
                    comList.remove("and")
                else:
                    itemList=comList
                itemList=articles(itemList)
                item=first_upper(" ".join(str(x) for x in itemList))
                Items.append(item)
        else:
            comList=articles(comList)
            item=first_upper(" ".join(str(x) for x in comList))
            Items.append(item)
    return com,object1,withSentence,Items

def articles(List):
    if "the" in List:
        List.remove("the")
    elif "an" in List:
        List.remove("an")
    elif "a" in List:
        List.remove("a")
    return List

def first_upper(word):
   if len(word) == 0:
      return word
   else:
      return word[0].upper() + word[1:]

def first_lower(word):
   if len(word) == 0:
      return word
   else:
      return word[0].lower() + word[1:]

def lower_case(List):
    if len(List)==0:
        return List
    else:
        for i in range(0,len(List)):
            List[i]=List[i].lower()
        return List

# Subprogram yhat checks characters current location
def CheckCurLoc():
    cur = db.cursor()
    sql = "select location from playercharacter where ID=1;"
    cur.execute(sql)
    result = cur.fetchall()
    for row in result:
        CurRoom="%s"%(row)
    return CurRoom
    

# Prints the description of character's current location    
def printCharCurLocDesc():
    cur = db.cursor()
    sql = "select description from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        for row in result:
            print("%s"%(row))
    return

# Subprogram that updates item to be with player, item's name as a parameter
def updateItemToPlayer(item):
    cur = db.cursor()
    sql = "select items.ID from items inner join itemtypes on itemtypes.ID=items.itemtype where name='"+item+"' and location in (select location from playercharacter where ID=1) limit 1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        for row in result:
            ID=int("%s"%(row))
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = 1 where items.ID=%d;"%(ID)
    cur.execute(sql)
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set location = null where items.ID=%d;"%(ID)
    cur.execute(sql)
    print(item+" taken.")
    return

# This subprogram checks if the item is on the room (item's name as a parameter)
def checkIfItemInRoom(item):
    itemInRoom=False;
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where id =1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==item:
                itemInRoom=True
    return itemInRoom
    
# Displays inventory
def inventory():
    cur = db.cursor()
    sql = "select itemtypes.name from items inner join itemtypes on items.itemtype=itemtypes.ID where withPlayer=1 order by name asc;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            print("-%s"%(row))
    return

# Subprogram that checks if the item is with player, item's name as a parameter
def checkIfUserHaveItem(item):
    itemWithPlayer=False;
    cur = db.cursor()
    sql = "select withPlayer from items inner join itemtypes on items.itemtype=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                itemWithPlayer=True
    return itemWithPlayer

def displayItemsInRoom():
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            print ("There's %s here"%(first_lower("%s"%(row))))
    return

# Subprogram that checks if the room is illuminated
def checkRoomLight():
    LightOn=False;
    cur = db.cursor()
    sql = "select light from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                LightOn=True
    else:
        LightOn=False
    return LightOn
        

def takeKey(item):
    successfulCommand=False
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount >1:
        print("Which key you want to take?")
    else:
        if cur.rowcount == 1:
            for row in result:
                item="%s"%(row)
        if checkIfItemInRoom(item) == True:
            updateItemToPlayer(item)
            successfulCommand=True
        else:
            print("You can't see such item.")
    return successfulCommand



def dropKey(item):
    successfulCommand=False
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount >1:
        print("Which key you want to drop?")
    else:
        if cur.rowcount == 1:
            for row in result:
                item="%s"%(row)
        if checkIfUserHaveItem(item) == True:
            dropItemToCurRoom(item)
            successfulCommand=True
        else:
            print("You don't have such item.")
    return successfulCommand

def useKey(Object,item):
    successfulCommand=False
    cur = db.cursor()
    if checkKey() == True:
        sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%key%' and withPlayer=1;"
        cur.execute(sql)
        result = cur.fetchall()
        if cur.rowcount >1:
            print("Which key you want to use?")
        else:
            if cur.rowcount == 1:
                for row in result:
                    item="%s"%(row)
            if checkIfUserHaveItem(item)==True:
                successfulCommand=openDoor(Object,item)
            else:
                print("You don't have the %s."%(item.lower()))
    else:
        print("You don't have any keys.")
    return successfulCommand

# Drops item to player's current location, item's name as a parameter
def dropItemToCurRoom(item):
    cur = db.cursor()
    sql = "select items.ID from items inner join itemtypes on itemtypes.ID=items.itemtype where name='"+item+"' and withPlayer=1 limit 1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        for row in result:
            ID=int("%s"%(row))
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = null, location = (select location from playercharacter where ID=1) where items.ID=%d;"%(ID)
    cur.execute(sql)
    print("You dropped %s."%(first_lower(item)))
    return

def roomInDirection(direction):
    cur = db.cursor()
    sql = "select "+direction+" from map where room in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirection = row[0]
        return roomDirection
    else:
        return
    
def roomOpenInDirection(direction):
    cur = db.cursor()
    sql = "select "+direction+"Open from map where room in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirectionOpen = row[0]
    return roomDirectionOpen


def checkIfObjectInRoom(object1):
    objectInRoom = False
    cur = db.cursor()
    sql = "select name from objects where location in (select location from playercharacter where ID=1) and name='"+object1+"';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            if row[0]==object1:
                objectInRoom = True
    return objectInRoom

def door(Object,item):
    successfulCommand=False
    cur = db.cursor()
    sql = "select unlocked from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            unlocked=int("%s"%(row))
    if unlocked==0:
        sql = "select neededkey from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        result = cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                neededKey="%s"%(row)
        if neededKey==item or item=="":
            sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name='"+neededKey+"' and withPlayer=1;"
            cur.execute(sql)
            result = cur.fetchall()
            if cur.rowcount>=1:
                    for row in result:
                        if row[0]==neededKey:
                            sql="select way from doors inner join objects on doors.ID=objects.ID where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
                            result = cur.fetchall()
                            if cur.rowcount>=1:
                                    for row in result:
                                        way="%s"%(row)
                            sql = "update map inner join room on map.room=room.ID set "+way+"Open=1 where room.ID in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
                            print("You unlock the %s."%(Object))
                            sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer=0 where name='"+neededKey+"' and withPlayer=1;"
                            cur.execute(sql)
                            sql = "update doors inner join objects on doors.ID=objects.ID set unlocked=1 where name='"+Object+"' and location in (select location from playercharacter where ID=1);"
                            cur.execute(sql)
                            successfulCommand=True
            elif item!="":
                print("You don't have the %s."%(neededKey.lower()))
            else:
                print("You don't have the key to this %s."%(Object))
        else:
            print("Your key doesn't fit the lock.")
    else:
        print("There's no %s to unlock."%(Object))
    return successfulCommand
        

        

# Subprogram for opening doors CheckCurLoc() == "87"
def openDoor(Object,item):
    successfulCommand=False
    plural=False
    cur = db.cursor()
    if len(Object)>0:
        if Object[-1]=="s":
            Object=Object[:-1]
            plural=True
    if checkIfObjectInRoom(Object)==True:
            if checkKey() == True:
                successfulCommand=door(Object,item)
            else:
                print("You don't have any keys.")
    else:
        if plural==True:
            print("There are no %ss to unlock."%(Object))
        else:
            print("There's no %s to unlock."%(Object))
    return successfulCommand
        
   
        
def directionPossibleIfYesMove(direction):
    moveOk = False
    cur = db.cursor()
    if roomInDirection(direction) != None and roomOpenInDirection(direction) == 1:
        sql = "update playercharacter set location = "+str(roomInDirection(direction))+" where id=1;"
        cur.execute(sql)
        moveOk = True
    elif roomInDirection(direction) != None and roomOpenInDirection(direction) == 0:
        sql = "select name from objects inner join doors on objects.ID=doors.ID where location in (select location from playercharacter where ID=1) and way='"+direction+"';"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                Object="%s"%(row)
        print("The %s is locked."%(Object))
    else:
        print("You can't go that way!")
    return moveOk

def checkKey():
    Key = False
    cur = db.cursor()
    sql = "select itemtype from items inner join itemtypes on items.itemtype=itemtypes.ID where name like '%key%' and withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            Key = True
    return Key

def whichKey():
    keys=[]
    cur = db.cursor()
    sql = "select itemtypes.ID from itemtypes inner join items on itemtypes.ID=items.itemtype where withPlayer=1 and name like '%key%';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            key="%s"%(row)
            keys.append(key)
    return keys
#Aliohjelma joka tulostaa huoneen nimen missä pelaaja sijaitsee

def printCharCurLocName():
    cur = db.cursor()
    sql = "select name from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        cur.execute(sql)
        for row in result:
            print("%s"%(row))
    return

#Aliohjelma joka tarkistaa onko huoneessa vierailtu

def checkIfRoomVisited():
    visited = False
    cur = db.cursor()
    sql = "select visited from room inner join playercharacter on playercharacter.location=room.ID where room.ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                visited=True
    else:
        visited=False
    return visited


#aliohjelma joka muuttaa huoneen käydyksi jos siellä ei ole käyty
def changeRoomVisited():
    cur = db.cursor()
    sql ="update room inner join playercharacter on playercharacter.location=room.ID set visited=1 where room.ID in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    return 

def displayStatus():
    cur = db.cursor()
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health="%s"%(row)
    sql = "select sanity from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanity="%s"%(row)
    print("Health: %s  Sanity: %s"%(health,sanity))
    displayWeaponsAndAmmo()
    return

def heal(item):
    cur = db.cursor()
    sql = "select healthEffect from healing inner join itemtypes on healing.ID=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            healingEffect=int("%s"%(row))
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    newHealth=health+healingEffect
    sql = "select sanityEffect from healing inner join itemtypes on healing.ID=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanityEffect=int("%s"%(row))
    sql = "select sanity from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanity=int("%s"%(row))
    newSanity=sanity+sanityEffect
    if newHealth>100:
        sql = "update playercharacter set health=100;"
        cur.execute(sql)
    else:
        sql = "update playercharacter set health=%d;"%(newHealth)
        cur.execute(sql)
    if newSanity>100:
        sql = "update playercharacter set sanity=100;"
        cur.execute(sql)
    else:
        sql = "update playercharacter set sanity=%d;"%(newSanity)
        cur.execute(sql)
    return

def CheckMonsterRoom(monster):
    cur = db.cursor()
    sql = "select location from monsters where ID=%d;"%(monster)
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            monsterLocation="%s"%(row)
    return monsterLocation

def CheckWhereMonsters():
    locationsOfMonsters=[]
    cur = db.cursor()
    sql = "select location from monsters;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            locationsOfMonsters.append("%s"%(row))
    return locationsOfMonsters


def monsterMove():
    MonsterIDs=[]
    cur = db.cursor()
    directions='north south west east northwest northeast southwest southeast'.split()
    sql = "select count(*) from monsters;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            numberOfMonsters=int("%s"%(row))
    sql = "select ID from monsters group by ID asc;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            MonsterIDs.append("%s"%(row))
    
    for x in range(0,numberOfMonsters):
        moved=False
        surroundingRooms=[]
        for i in range(0,8):
            sql = "select "+directions[i]+" from map inner join room on map.room=room.ID inner join monsters on monsters.location=room.ID where monsters.ID=%d;"%(int(MonsterIDs[x]))
            cur.execute(sql)
            result=cur.fetchall()
            if cur.rowcount>=1:
                for row in result:
                    surroundingRooms.append("%s"%(row))
        forbiddenRooms=CheckWhereMonsters()
        if len(forbiddenRooms)<8:
            if CheckCurLoc() in surroundingRooms and CheckCurLoc() not in forbiddenRooms:
                sql = "update monsters set location=%r where ID=%r;"%(CheckCurLoc(),int(MonsterIDs[x]))
                cur.execute(sql)
                moved=True
            elif CheckMonsterRoom(int(MonsterIDs[x]))!= CheckCurLoc():
                while moved==False:
                    rndDirection=directions[random.randint(0,len(directions)-1)]
                    sql = "select "+rndDirection+" from map inner join room on map.room=room.ID inner join monsters on monsters.location=room.ID where monsters.ID=%d;"%(int(MonsterIDs[x]))
                    cur.execute(sql)
                    result=cur.fetchall()
                    if cur.rowcount>=1:
                        for row in result:
                            newRoom="%s"%(row)
                    if newRoom != 'None' and newRoom not in forbiddenRooms:
                        sql = "update monsters set location=%r where ID=%r;"%(newRoom,int(MonsterIDs[x]))
                        cur.execute(sql)
                        moved=True
    return

def checkIfMonstersInCurRoom():
    monsterInCurRoom=""
    cur=db.cursor()
    sql="select name from monstertype inner join monsters on monstertype.ID=monsters.type where location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            monsterInCurRoom="%s"%(row)
    return monsterInCurRoom

def Monsters():
    battleOutcome="win"
    if checkIfMonstersInCurRoom()!="":
        if checkIfMonstersInCurRoom()=='Walking Corpse':
            battleOutcome=WalkingCorpse()
    return battleOutcome
        

def DireWolf():
    cur = db.cursor()
    
def WalkingCorpse():
    cur = db.cursor()
    if checkRoomLight()==True:
        sql = "select description from monstertype where name='Walking Corpse';"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                description="%s"%(row)
        print(description)
        time.sleep(3)
    else:
        print('''Something rushes towards you in the darkness. You can hear the clumsy footsteps echoing in this room,
but you can't see your assaulter. Better do something before it attacks you!''')
        time.sleep(3)
    battleOutcome=battle("Walking corpse")
    return battleOutcome

def displayWeaponsAndAmmo():
    cur = db.cursor()
    sql = "select name,loadedammo from itemtypes inner join items on itemtypes.ID=items.itemtype where withPlayer=1 and loadedammo>=0 group by name asc;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            print("%s:%s"%(row[0],row[1]))
    sql = "select bullets,shells from playercharacter where ID=1 group by bullets,shells;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            bullets=int("%s"%(row[0]))
            shells=int("%s"%(row[1]))
    if bullets>0:
        print("Bullets:%d"%(bullets),end="  ")
    if shells>0:
        print("Shotgun shells:%d"%(shells))
    elif shells<=0 and bullets>0:
        print()
    return

def battle(monster):
    battleOutcome="win"
    while checkIfMonstersInCurRoom()!="" and battleOutcome=="win":
        successfulCommand=False
        while successfulCommand==False:
            print("What are you going to do!?")
            choice=input("1.Attack\n2.Reload\n3.Use item\n4.Run!\n")
            if choice=="1":
                if checkIfUserHaveItem("Sword")==True or checkIfUserHaveItem("Axe")==True or checkIfUserHaveItem("Revolver")==True or checkIfUserHaveItem("Double barreled shotgun")==True or checkIfUserHaveItem("Sword of uncreation")==True:
                    weapon=input("What weapon do you want to use?")
                    ChosenWeaponList=weapon.split()
                    ChosenWeaponList=articles(ChosenWeaponList)
                    weapon=first_upper(" ".join(str(x) for x in ChosenWeaponList))
                    if weapon=="Shotgun":
                        weapon="Double barreled shotgun"
                    if checkIfUserHaveItem(weapon)==True:
                        attack(weapon)
                        successfulCommand=True
                    elif checkIfUserHaveItem(weapon)==False and weapon!="Back":
                        print("You don't have such weapon in your possession!")
            
                else:
                    print("You don't have any weapons!")
            elif choice=="2":
                if checkIfUserHaveItem("Revolver")==True or checkIfUserHaveItem("Double barreled shotgun")==True:
                    weapon=input("What weapon do you want to reload?")
                    ChosenWeaponList=weapon.split()
                    ChosenWeaponList=articles(ChosenWeaponList)
                    weapon=first_upper(" ".join(str(x) for x in ChosenWeaponList))
                    if weapon=="Shotgun":
                        weapon="Double barreled shotgun"
                    if checkIfUserHaveItem(weapon)==True:
                        if weapon=="Revolver":
                            if Checkloadedammo(weapon)==checkMaxAmmo(weapon):
                                print("Your revolver is already full of ammo!")
                            elif checkAmmo("bullets")>0:
                                reload(weapon)
                                successfulCommand=True
                            else:
                                print("You don't have any bullets left.")
                        elif weapon=="Double barreled shotgun":
                            if Checkloadedammo(weapon)==checkMaxAmmo(weapon):
                                print("Your shotgun is already full of ammo!")
                            elif checkAmmo("shells")>0:
                                reload(weapon)
                                successfulCommand=True
                            else:
                                print("You don't have any shotgun shells left.")
                        else:
                            print("That's not something you can reload!")
                    elif checkIfUserHaveItem(weapon)==False and weapon!="Back":
                        print("You don't have such weapon in your possession!")
                else:
                    print("You don't have weapons to reload!")
            elif choice=="status":
                displayStatus()
            elif choice=="inventory":
                inventory()
            elif choice=="4":
                direction=input("In which directions do you want to escape? ")
                if direction=="e":
                    direction = "east"
                elif direction=="w":
                    direction = "west"
                elif direction=="n":
                    direction = "north"
                elif direction=="s":
                    direction = "south"
                elif direction=="d":
                    direction = "down"
                elif direction=="u":
                    direction = "up"
                elif direction=="ne":
                    direction = "northeast"
                elif direction=="se":
                    direction = "southeast"
                elif direction=="sw":
                    direction = "southwest"
                elif direction=="nw":
                    direction = "northwest"
                if random.randint(1,10)>1:
                    if directionPossibleIfYesMove(direction)==True:
                        print("You manage to escape from the foul creature.")
                        battleOutcome="run"
                        successfulCommand=True
                else:
                    print("The horrid creature blocks your way!")
                    time.sleep(1)
                    successfulCommand=True
        if battleOutcome=="win":
            checkHealth()
            if checkIfMonstersInCurRoom()!="":
                sanityLoss(monster)
                if monsterCheckHit(monster)==True:
                    print("And hits you dealing %d point of damage!"%(monsterDamage(monster)))
                    time.sleep(1)
                else:
                    print("And misses!")
                    time.sleep(1)
                battleOutcome=checkPlayerHealth()
    return battleOutcome

def checkHit(weapon):
    hit=False
    cur = db.cursor()
    if checkRoomLight()==True:
        if weapon=="Axe" or weapon=="Sword" or weapon=="Sword of uncreation":
            print("You strike the horrid creature...")
            time.sleep(1)
        else:
            print("You shoot the horrid creature...")
            time.sleep(1)
        sql = "select accuracy from weapons inner join itemtypes on weapons.ID=itemtypes.ID where name='"+weapon+"';"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                accuracy=int("%s"%(row))
    else:
        if weapon=="Axe" or weapon=="Sword" or weapon=="Sword of uncreation":
            print("You strike blindly into the darkness...")
            accuracy=2
            time.sleep(1)
        else:
            print("You shoot blindly into the darkness...")
            accuracy=2
            time.sleep(1)
    if accuracy>=random.randint(1,20):
        hit=True
    return hit

def damage(weapon):
    cur = db.cursor()
    sql = "select damage from weapons inner join itemtypes on weapons.ID=itemtypes.ID where name='"+weapon+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            damage=int("%s"%(row))
    sql = "select health from monsters where location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    sql = "update monsters set health=%d where location in (select location from playercharacter where ID=1);"%(health-damage)
    cur.execute(sql)
    return damage

def checkHealth():
    cur = db.cursor()
    sql = "select health from monsters where location in (select location from playercharacter where ID=1);"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    if health<=0:
        sql = "delete from monsters where location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        if checkRoomLight()==True:
            print("The horrid creature crumbles before you, and thick cloud of black smoke flees its body leaving only pile of dust behind...")
        else:
            print('''Your enemy let's out a horrible scream of agony, and you can hear a sound resembling dust falling on the floor.
Afterwards there's only silence...''')
    return

def attack(weapon):
    cur = db.cursor()
    sql = "select loadedammo from items inner join itemtypes on items.itemtype=itemtypes.ID where name='"+weapon+"' and withPlayer=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            ammo="%s"%(row)
    if ammo=='None':
        if checkHit(weapon)==True:
            damageDone=damage(weapon)
            print("And your strike hits doing %d points of damage!"%(damageDone))
            time.sleep(1)
        else:
            print("And your strike misses!")
            time.sleep(1)
    else:
        ammo=int(ammo)
        if ammo>0:
            if checkHit(weapon)==True:
                damageDone=damage(weapon)
                print("And your shot hits doing %d points of damage!"%(damageDone))
                time.sleep(1)
            else:
                print("And your shot misses!")
                time.sleep(1)
            if weapon=="Revolver":
                sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set loadedammo=loadedammo-1 where name='"+weapon+"';"
                cur.execute(sql)
            elif weapon=="Double barreled shotgun":
                sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set loadedammo=loadedammo-2 where name='"+weapon+"';"
                cur.execute(sql)
        else:
            print("You don't have any ammo in that weapon. Reload it!")
    return

def checkMaxAmmo(weapon):
    cur = db.cursor()
    sql = "select MAXammo from weapons inner join itemtypes on weapons.ID=itemtypes.ID where name='"+weapon+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            MaxAmmo=int("%s"%(row))
    return MaxAmmo

def checkAmmo(ammotype):
    cur = db.cursor()
    sql = "select "+ammotype+" from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            ammo=int("%s"%(row))
    return ammo

def reload(weapon):
    cur = db.cursor()
    if weapon=="Revolver":
        while Checkloadedammo(weapon)<checkMaxAmmo(weapon) and checkAmmo("bullets")>0:
                sql = "update playercharacter set bullets=bullets-1 where ID=1;"
                cur.execute(sql)
                sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set loadedammo=loadedammo+1 where name='"+weapon+"' and withPlayer=1;"
                cur.execute(sql)
        print("With shaking hands, you nervously reload the revolver.")
    elif weapon=="Double barreled shotgun":
        while Checkloadedammo(weapon)<checkMaxAmmo(weapon) and checkAmmo("shells")>0:
                sql = "update playercharacter set shells=shells-1 where ID=1;"
                cur.execute(sql)
                sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set loadedammo=loadedammo+1 where name='"+weapon+"' and withPlayer=1;"
                cur.execute(sql)           
        print("With shaking hands, you nervously reload the double barreled shotgun.")
    return
    
        
def Checkloadedammo(weapon):
    cur = db.cursor()
    sql = "select loadedammo from items inner join itemtypes on itemtypes.ID=items.itemtype where name='"+weapon+"' and withPlayer=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            loadedammo=int("%s"%(row))
    return loadedammo

def takeAmmo(item):
    cur = db.cursor()
    sql = "select items.ID from items inner join itemtypes on items.itemtype=itemtypes.ID where name='"+item+"' and location in (select location from playercharacter where ID=1) limit 1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            ID=int("%s"%(row))
    sql = "update items set location=null where ID=%d;"%(ID)
    cur.execute(sql)
    if item=="Box of bullets":
        sql = "update playercharacter set bullets=bullets+12 where ID=1;"
        cur.execute(sql)
        print("%s taken. Bullets +12."%(item))
    else:
        sql = "update playercharacter set shells=shells+6 where ID=1;"
        cur.execute(sql)
        print("%s taken. Shells +6."%(item))
    return

def sanityLoss(monster):
    cur = db.cursor()
    sql = "select effectOnSanity from monstertype where name='"+monster+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            sanityLoss=int("%s"%(row))
    if random.randint(1,2)==1:
        sql = "select sanity from playercharacter where ID=1;"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
            for row in result:
                sanity=int("%s"%(row))
        newSanity=sanity-sanityLoss
        if newSanity<=0:
            sql = "update playercharacter set sanity=0 where ID=1;"
            cur.execute(sql)
        else:
            sql = "update playercharacter set sanity=%d where ID=1;"%(newSanity)
            cur.execute(sql)
        if checkRoomLight()==True:
            print('''The horrific abomination is terrible to look at, and every glance of it makes your mind fill with all-consuming terror.
You can't help but feel that you're making another step toward madness...''')
            time.sleep(3)
            print("Sanity -%d"%(sanityLoss))
        else:
            print('''You can hear the thing growling in the darkness. Surrounded by this horror you feel hopeless...
and that infernal guttural voice surely drives you one step toward madness!''')
            time.sleep(3)
            print("Sanity -%d"%(sanityLoss))
    return


def monsterCheckHit(monster):
    hit=False
    cur = db.cursor()
    if checkRoomLight()==True:
        print("The creature attacks you...")
        time.sleep(1)
    else:
        print("The thing assaults you from the darkness...")
        time.sleep(1)
    sql = "select accuracy from monstertype where name='"+monster+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            accuracy=int("%s"%(row))
    if accuracy>=random.randint(1,20):
        hit=True
    return hit

def monsterDamage(monster):
    cur = db.cursor()
    sql = "select attack from monstertype where name='"+monster+"';"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            damage=int("%s"%(row))
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    sql = "update playercharacter set health=%d where ID=1;"%(health-damage)
    cur.execute(sql)
    return damage

def checkPlayerHealth():
    battleOutcome="win"
    cur = db.cursor()
    sql = "select health from playercharacter where ID=1;"
    cur.execute(sql)
    result=cur.fetchall()
    if cur.rowcount>=1:
        for row in result:
            health=int("%s"%(row))
    if health<=0:
        print('''You have too many wounds, and they are too deep indeed. The blood loss is at serious levels, and looking down on your blood soaked clothes makes you feel nauseous.
Soon your vision gets blurry and you can't help but collapse to the ground. Taking your last breath, you can sense your soul breaking away from its earthly prison,
and finally does the cold embrace of death take you deep down into the oblivion. You are dead...''')
        time.sleep(3)
        battleOutcome="lose"
    return battleOutcome


def updateAllItemsToPlayer(item):
    TakenItems=[]
    cur = db.cursor()
    if item=='':
        sql="select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
                for row in result:
                    TakenItems.append("%s taken."%(row))
        for item in TakenItems:
            print("%s"%(item))
        sql="update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer=1,location=null where location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
    else:
        if item=="key":
            sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where name like '%"+item+"%' and location in (select location from playercharacter where ID=1);"
            cur.execute(sql)
            result=cur.fetchall()
            if cur.rowcount>=1:
                    for row in result:
                        print("%s taken."%(row))
            sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer=1,location=null where name like '%"+item+"%' and location in (select location from playercharacter where ID=1);"
            cur.execute(sql)
        else:
            sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = 1,location=null where name='"+item+"' and location in (select location from playercharacter where ID=1);"
            cur.execute(sql)
            for x in range(0,cur.rowcount):
                print(item+" taken.")
    return

def takeAllAmmo(item):
    cur = db.cursor()
    if item=='Ammo':
        sql= "select count(name) from itemtypes inner join items on items.itemtype=itemtypes.ID where name='Box of bullets' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
                for row in result:
                    bullets=int("%s"%(row))
        sql= "select count(name) from itemtypes inner join items on items.itemtype=itemtypes.ID where name='Box of shotgun shells' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        result=cur.fetchall()
        if cur.rowcount>=1:
                for row in result:
                    shells=int("%s"%(row))
        sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set location=null where name like '%Box of%' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        for x in range(0,bullets):
            sql = "update playercharacter set bullets=bullets+12 where ID=1;"
            cur.execute(sql)
            print("Box of bullets taken. Bullets +12.")
        for x in range(0,shells):
            sql = "update playercharacter set shells=shells+6 where ID=1;"
            cur.execute(sql)
            print("Box of shotgun shells taken. Shells +6.")
    else:
        sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set location=null where name='"+item+"' and location in (select location from playercharacter where ID=1);"
        cur.execute(sql)
        numberOfTakenBoxes=cur.rowcount
        if item=="Box of bullets":
            for x in range(0,numberOfTakenBoxes):
                sql = "update playercharacter set bullets=bullets+12 where ID=1;"
                cur.execute(sql)
                print("%s taken. Bullets +12."%(item))
        else:
            for x in range(0,numberOfTakenBoxes):
                sql = "update playercharacter set shells=shells+6 where ID=1;"
                cur.execute(sql)
                print("%s taken. Shells +6."%(item))
    return


def takeAll(item):
    TakenAll=False
    if item=="Boxes" or item=="Ammo" or item=="Boxes of bullets" or item=="Boxes of shotgun shells" or item=="Shells" or item=="Bullets":
        if item=="Boxes" or item=="Ammo":
            if checkIfItemInRoom("Box of bullets")==True or checkIfItemInRoom("Box of shotgun shells")==True:
                takeAllAmmo('Ammo')
            else:
                print("You can't see any %s here."%(item.lower()))
        elif item=="Shells" or item=="Boxes of shotgun shells":
            if checkIfItemInRoom("Box of shotgun shells")==True:
                takeAllAmmo("Box of shotgun shells")
                successfulCommand=True
            else:
                print("You can't see %s here."%(item.lower()))
        elif item=="Bullets" or item=="Boxes of bullets":
            if checkIfItemInRoom("Box of bullets")==True:
                takeAllAmmo("Box of bullets")
                successfulCommand=True
            else:
                print("You can't see %s here."%(item.lower()))
    else:
        if item=='':
            takeAllAmmo('Ammo')
            updateAllItemsToPlayer(item)
            TakenAll=True
        elif item == "Keys":
            successfulCommand=updateAllItemsToPlayer("key")
    #Tarkistetaan että käskyssä annettu esine on huoneessa; Jos on, otetaan se
        elif checkIfItemInRoom(item) == True:
            updateAllItemsToPlayer(item)
            successfulCommand=True
        else:
            print("You can't see %s here."%(item.lower()))
    return TakenAll

#PÄÄOHJELMA ALKAA

# Tietokantayhteyden nuodostaminen
db = mysql.connector.connect(host="127.0.0.1",
                            user="Rainer",
                            passwd="Ironmaiden28995",
                            db="gravehill",
                            buffered=True)
#db.autocommit=False;
Title()
printStoryDesc()
x = input("Type 'c' to continue ")
while (x != "c"):
    print("Please try again")
    x = input ("Type 'c' to continue ")
print("\n")
print("Welcome to the Castle Gravehill!\n")
time.sleep(1)
end = "temp"

while (end != "quit"):
    if checkRoomLight() == True and checkIfRoomVisited() == False:
        printCharCurLocName()
        printCharCurLocDesc()
        displayItemsInRoom()
        changeRoomVisited()
    elif checkRoomLight()==False:
        print("Darkness")
        print("You can't see a thing in this pitch dark room!")
    else:
        printCharCurLocName()
        displayItemsInRoom()
    time.sleep(1)
    move_look=False
    battleOutcome=Monsters()
    if battleOutcome=="lose":
        gameover=True
    elif battleOutcome=="run":
        print()
        move_look=True
    else:
        gameover=False
    com="temp"
    while move_look == False and end != "quit" and gameover==False:
        successfulCommand=False
        battleOutcome=Monsters()
        if battleOutcome=="lose":
            gameover=True
        elif battleOutcome=="run":
            print()
            move_look=True
            successfulCommand=True
        else:
            gameover=False
        while successfulCommand==False and end != "quit" and gameover==False:
            command = input("What would you like to do? ")
            if command=="":
                print("Whatever")
            else:
                (com,object1,withSentence,Items)=parser(command)
            
            #if-rakenne, missä käydään kaikki komennot läpi
                if com == "commands" and withSentence==False and Items==['']:
                    printCommands()
                elif withSentence==False and Items==[''] and com == "quit" or withSentence==False and Items==[''] and com == "q":
                    end="quit"
                elif com == "look" and withSentence==False and Items==['']:
                    print("Your current location is:\n")
                    printCharCurLocName()    
                    printCharCurLocDesc()
                    displayItemsInRoom()
                elif com == "take" and withSentence==False:
                    Alltaken=False
                    if Items!=['']:
                        for item in Items:
                            if "All " in item or item=="All":
                                if item=="All":
                                    item=''
                                    Alltaken=takeAll(item)
                                else:
                                    item=item.split()
                                    del item[0]
                                    item=first_upper(" ".join(str(x) for x in item))
                                    Alltaken=takeAll(item)
                            elif item=="Box" or item=="Ammo" or item=="Box of bullets" or item=="Box of shotgun shells" or item=="Shells" or item=="Bullets":
                                if item=="Box" or item=="Ammo":
                                    if checkIfItemInRoom("Box of bullets")==True and checkIfItemInRoom("Box of shotgun shells")==True:
                                        print("Which box of ammo did you mean?")
                                    elif checkIfItemInRoom("Box of bullets")==True and checkIfItemInRoom("Box of shotgun shells")==False:
                                        takeAmmo("Box of bullets")
                                        successfulCommand=True
                                    elif checkIfItemInRoom("Box of bullets")==False and checkIfItemInRoom("Box of shotgun shells")==True:
                                        takeAmmo("Box of shotgun shells")
                                        successfulCommand=True
                                    else:
                                        print("You can't see %s here."%(item.lower()))
                                elif item=="Shells":
                                    if checkIfItemInRoom("Box of shotgun shells")==True:
                                        takeAmmo("Box of shotgun shells")
                                        successfulCommand=True
                                    else:
                                        print("You can't see %s here."%(item.lower()))
                                elif item=="Bullets":
                                    if checkIfItemInRoom("Box of bullets")==True:
                                        takeAmmo("Box of bullets")
                                        successfulCommand=True
                                    else:
                                        print("You can't see %s here."%(item.lower()))
                                else:
                                    if checkIfItemInRoom(item)==True:
                                        takeAmmo(item)
                                        successfulCommand=True
                                    else:
                                        print("You can't see %s here."%(item.lower()))
                            else:    
                                if item == "Key":
                                    successfulCommand=takeKey(item)
                                elif item=="Shotgun":
                                    if checkIfItemInRoom("Double barreled shotgun")==True:
                                        updateItemToPlayer("Double barreled shotgun")
                                        successfulCommand=True
                                    else:
                                        print("You can't see %s here."%(item.lower()))
            #Tarkistetaan että käskyssä annettu esine on huoneessa; Jos on, otetaan se
                                elif checkIfItemInRoom(item) == True:
                                    updateItemToPlayer(item)
                                    successfulCommand=True
                                else:
                                    print("You can't see %s here."%(item.lower()))
                            if Alltaken==True:
                                Items.clear()
                    else:
                        print("What do you want to take?")
                elif com == "inventory" and withSentence==False and Items==['']:
                    print("Player Items:")
                    inventory()
                elif com == "unlock":
                    if withSentence==False:
                        if len(Items)==1 and "All " not in Items[0]:
                            object1=Items[0].lower()
                            if object1=="":
                                print("What do you wish to unlock?")
                            else:
                                Items[0]=''
                                successfulCommand=openDoor(object1,Items[0])
                        elif len(Items)>1 and Items[0]=='':
                            print("I didn't quite understand.")
                        else:
                            print("One thing at a time, my friend.")
                    else:
                        if object1=="":
                            print("What do you wish to unlock?")
                        else:
                            if Items==['']:
                                print("With what do you want to unlock?")
                            elif len(Items)==1:
                                if Items[0]!="Key" and Items[0]!="Golden key" and Items[0]!="Silver key" and Items[0]!="Brass key" and Items[0]!="Iron key":
                                    print("You can't do that")
                                elif Items[0]=="Key":
                                    successfulCommand=useKey(object1,Items[0])
                                else:
                                    successfulCommand=openDoor(object1,Items[0])
                            else:
                                print("I didn't quite understand.")
                elif com == "drop" and withSentence==False:
                    if Items!=['']:
                        for item in Items:
                            if item=="Key":
                                successfulCommand=dropKey(item)
                            elif item=="Shotgun":
                                if checkIfUserHaveItem("Double barreled shotgun")==True:
                                    dropItemToCurRoom("Double barreled shotgun")
                                    successfulCommand=True
                                else:
                                    print("You don't have double barreled shotgun.")
                        #Tarkistetaan että käskyssä annettu esine on pelaajalla; Jos on, pudotetaan se
                            elif checkIfUserHaveItem(item) == True:
                                dropItemToCurRoom(item)
                                successfulCommand=True
                            else:
                                print("You don't have %s."%(item))
                    else:
                        print("What do you wish to drop?")
                elif com=="status" and withSentence==False and Items==['']:
                    displayStatus()

                elif com=="use" and withSentence==False:
                    if len(Items)==1:
                        if Items[0]=="Bandages":
                            if checkIfPlayerHaveItem(Item[0])==True:
                                heal(Item[0])
                                print("You bind your wounds and feel a bit of relief.\nHealth +50")
                                successfulCommand=True
                            else:
                                print("You don't have any bandages.")
                        elif Items[0]=="Morphine":
                            if checkIfPlayerHaveItem(Item[0])==True:
                                heal(Item[0])
                                print("You inject the morphine into your arm, and the sudden rush of dopamine fills your brain. It doesn't feel that bad anymore...\nHealth +20, Sanity +50")
                                successfulCommand=True
                        elif checkIfUserHaveItem(Items[0])==True:
                            print("You can't do that.")
                        else:
                            print("You don't have such item.")
                    else:
                        print("One thing at a time, my friend.")

                elif com=="reload" and withSentence==False:
                    if len(Items)==1:
                        item=Items[0]
                        if item=='':
                            print("Which weapon do you want to reload?")
                        else:
                            if item=="Shotgun":
                                item="Double barreled shotgun"
                            if checkIfUserHaveItem(item)==True:
                                if item=="Double barreled shotgun":
                                    if checkAmmo("shells")>0:
                                        if Checkloadedammo(item)==checkMaxAmmo(item):
                                            print("Your shotgun is already full of ammo.")
                                        else:
                                            reload(item)
                                            successfulCommand=True
                                    else:
                                        print("You don't have any shotgun shells.")
                                elif item=="Revolver":
                                    if checkAmmo("bullets")>0:
                                        if Checkloadedammo(item)==checkMaxAmmo(item):
                                            print("Your revolver is already full of ammo.")
                                        else:
                                            reload(item)
                                            successfulCommand=True
                                    else:
                                        print("You don't have any bullets.")
                                else:
                                    print("That's not something you can reload!")
                            else:
                                print("You don't have such weapon.")
                    else:
                        print("One thing at a time, my friend.")
        
                elif withSentence==False and com == "east" and Items==[''] or withSentence==False and com == "e" and Items==[''] or withSentence==False and com == "west" and Items==[''] or withSentence==False and com == "w" and Items==[''] or withSentence==False and com == "north" and Items==[''] or withSentence==False and com == "n" and Items==[''] or withSentence==False and com == "south" and Items==[''] or withSentence==False and com == "s" and Items==[''] or withSentence==False and com == "down" and Items==[''] or withSentence==False and com == "d" and Items==[''] or withSentence==False and com == "up" and Items==[''] or withSentence==False and com == "u" and Items==[''] or withSentence==False and com == "northeast" and Items==[''] or withSentence==False and com == "ne" and Items==[''] or withSentence==False and com == "southeast" and Items==[''] or withSentence==False and com == "se" and Items==[''] or withSentence==False and com == "southwest" and Items==[''] or withSentence==False and com == "sw" and Items==[''] or withSentence==False and com == "northwest" and Items==[''] or withSentence==False and com== "nw" and Items==['']: 
                    if com=="e":
                        com = "east";
                    if com=="w":
                        com = "west";
                    if com=="n":
                        com = "north";
                    if com=="s":
                        com = "south";
                    if com=="d":
                        com = "down";
                    if com=="u":
                        com = "up";
                    if com=="ne":
                        com = "northeast";
                    if com=="se":
                        com = "southeast";
                    if com=="sw":
                       com = "southwest";
                    if com=="nw":
                        com = "northwest";
          
                    if directionPossibleIfYesMove(com) == True:
                        print("\n")
                        move_look = True
                        successfulCommand=True
                else:
                    print("I did not understand, please try again")
        if battleOutcome!="run":
            monsterMove()
    if gameover==True:
        if GameOver()==True:
            end="quit"
        else:
            gameover=False

# Perutaan tietokantaan tehdyt muutokset
db.rollback()
#suljetaan tietokanta yhteys
db.close()
print("\nI will see you in your nightmares",end="")
for x in range (0,6):
    time.sleep(0.7)
    print(".",end="")
time.sleep(2)
print("\nBYE!")
